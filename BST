#include<iostream>
using namespace std;
class Node
{

public:
    int data;
    Node *left;
    Node *right;
    Node(int d)
    {
        data = d;
        left = NULL;
        right = NULL;
    }
};
class BST{
    public:
    Node *insertToBst(Node *root, int d)
    {
        
        if (root == NULL)
        {
            root = new Node(d);
            return root;
        }
    
        if (d > root->data)
        {
            
            root->right = insertToBst(root->right, d);
            return root;
            
            
        }
        else
        {
            
            root->left = insertToBst(root->left, d);
            return root;
            
            
        }
    }
    
    void create(Node *&root)
    {
        int data;
        cout<<"Enter Element to insert in BST (if not enter -1) :"<<endl;
        cin >> data;
        while (data != -1)
        {
            root = insertToBst(root, data);
            cin >> data;
        }
    }
    void inOrder(Node* root){
        if (root == NULL)
            {
                return;
            }
            inOrder(root->left);
            cout << root->data << " ";
            inOrder(root->right);
    }
    Node* search(Node* root,int key){
        
        if (root == NULL || root->data == key)
            return root->data;
    
   
        if (root->data< key)
            return search(root->right, key);
 
        else
            return search(root->left, key);
        
    }
        
};
   
int main(){
    BST b;
    
    Node* root=NULL;
    b.create(root);
    b.inOrder(root);
    b.search(root,30);
    return 0;
}
